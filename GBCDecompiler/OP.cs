public enum OP
{
    DONE = 0x0,
    MAIN = 0x1,
    AMEM = 0x2, // ALIGN
    CLNE = 0x3,
    SWP = 0x4, // implement
    POP = 0x5,  // drop

    JMP = 0x10,
    JMPZ = 0x11,
    JMPNZ = 0x12,// jump not zero
    BRZ = 0x13, // branch zero jump@
    BRNZ = 0x14, // branch not zero
    BRT = 0x15, // 
    CMB = 0x16, // combo
    CMBZ = 0x17, // combo end?
    CBW = 0x18, // wait
    CBWE = 0x19, //
    CBWS = 0x1A, //
    CBCR = 0x1B,  
    CBCW = 0x1C,
    CALL = 0x1D, // call()
    RET = 0x1E, //return
    VRET = 0x1F, //return (val)
    LCB = 0x20, // pushB
    LCW = 0x22, // pushS
    LPTR = 0x23, //pushPtr
    LCD = 0x24, // pushI32
    LDB = 0x25, // getByte
    LDBX = 0x26, // not certain
    LDW = 0x27, // getI16
    LDWX = 0x28, //
    LDD = 0x29, // getI32
    LDBI = 0x2A,
    LDBIX = 0x2B,
    LDWI = 0x2D,
    LDDI = 0x2E,
    MSET = 0x30, //memset()
    MCPY = 0x31, //memcpy()
    STB = 0x32, // setS
    STW = 0x33, // set
    STD = 0x34, // setI
    STBI = 0x35, // TEST
    STWI = 0x36, // TEST
    STDI = 0x37, // TEST
    //STBR = 0x38, // param for function calls
    STWR = 0x39, // STWR + 1 byte
    //STDR = 0x3A,
    //STPR = 0x3B,
    INCB = 0x40, // increment (1 CF)
    INCW = 0x41,
    INCD = 0x42,
    INCF = 0x43,
    DECB = 0x44, // decrement (1 CF)
    DECW = 0x45,
    DECD = 0x46,
    DECF = 0x47,
    UTOB = 0x49,
    UTOW = 0x4A,
    ITOB = 0x4B,
    ITOW = 0x4C,
    DIV = 0x4E, // Division Int
    MOD = 0x4F, // Modulus Int %
    NEG = 0x50, // neg
    COMP = 0x51, // ~
    INV = 0x52, // inv
    ITOF = 0x53,  // Int to Fixed
    FTOI = 0x54, // Fixed to Int

    DIVF = 0x57, // Divison Fixed ??
    MUL = 0x58, // Multiply Int ??
    MULF = 0x59, // Multiply Fixed ??
    SUB = 0x5A, // Subtraction ??
    ADD = 0x5B, // Addition ?? 
    SR = 0x5C, // shift right
    SL = 0x5D, // shift left

    GE = 0x61, // greater than or equals
               // 0x62
    LE = 0x63, // less than or equals
    GT = 0x65, // greater than

    LT = 0x67, // less than
    NE = 0x68, // not equals
    EQ = 0x69, // equals
    ANDB = 0x6A, // Bitwise And &
    XORB = 0x6B, // Bitwise Xor ^
    ORB = 0x6C, // Bitwise Or |
    AND = 0x6D,  // Logical And &&
    XOR = 0x6E,  // Logical Xor ^^
    OR = 0x6F, // Logical Or ||
    ABS = 0x70,  // abs()
    RAND = 0x71, // rand()
    FLOOR = 0x72, // floor()
    CEIL = 0x73, // ceil()
    ROUND = 0x74, //round()
    MIN = 0x75, // min()
    MAX = 0x76, // min()
    CLAMP = 0x77, // clamp()
    MODF = 0x78, // mod()
    LERP = 0x79, // lerp()
    SIN = 0x7A, // sin()
    COS = 0x7B, // cos()
    TAN = 0x7C, // tan()
    ASIN = 0x7D, // asin()
    ACOS = 0x7E,  // acos()          
    ATAN = 0x7F, // atan()
    ATAN2 = 0x80, // atan2
    R2D = 0x81, // rad2deg()
    D2R = 0x82,  // deg2rad()
    SQRT = 0x83, // sqrt()
    SQ = 0x84,  // sq()
    EXP = 0x85, // exp()
    LOG = 0x86, // log()
    LOG2 = 0x87, // log2()
    POW = 0x88, // pow() Int 
    POWF = 0x89, // pow() Fixed
    //
    CRUN = 0x90, // combo_run()
    CRST = 0x91, // combo_restart()
    CPSE = 0x92, // combo_pause()
    CSTP = 0x93, // combo_stop()
    MXYH = 0x94, // mxyconverter_hoffset()
    MXYV = 0x95, // mxyconverter_voffset()
    MXYC = 0x96, // mxyconverter()
    MXYR = 0x97, // mxyconverter_reset()
    RMAP = 0x98, // remapper()
    RSWP = 0x99, // remapper_swap() / remapper_disable()
    RRST = 0x9A, // remapper_reset()
    KMAP = 0x9B, // keymapping()
    KRST = 0x9C, // keymapping_reset()
    MMAP = 0x9D, // mousemapping()
    MRST = 0x9E, // mousemapping_reset()
    RMSK = 0x9F, // remapper_mask()
    SVAL = 0xA0, // setFVal
    SVALI = 0xA1,// setIVal
    GVAL = 0xA2, // getCVal
    GVALA = 0xA3, // getActual
    GPRV = 0xA4, // get_prev()
    ISACT = 0xA5, // is_active()
    ISRES = 0xA6, // is_release()
    TMACT = 0xA7, // time_active()
    TMRES = 0xA8, // time_release()
    EVACT = 0xA9, // event_active()
    EVRES = 0xAA, // event_realese()
    CKACT = 0xAB, // check_active()
    CKRES = 0xAC, // check_release()
    INHB = 0xAD, // inhibit()
    BATS = 0xB0, // battery_set()
    BATG = 0xB1, // battery_get()
    BATGA = 0xB2, // battery_get_actual()
    BATR = 0xB3, // battery_reset()
    LEDS = 0xB4, // led_set()
    LEDG = 0xB5, // led_get()
    LEDGA = 0xB6, // led_get_actual()
    LEDVS = 0xB7, // led_vmset()
    LEDVG = 0xB8, // led_vmget()
    LEDR = 0xB9, // led_reset()
    FFBS = 0xBA, // ffb_set()
    FFBG = 0xBB, // ffb_get()
    FFBGA = 0xBC, // ffb_get_actual()
    FFBR = 0xBD, // ffb_reset()
    //
    KSTS = 0xC0, // key_status()
    KCHK = 0xC1, // key_check()
    MSTS = 0xC2, // mouse_status()
    KSST = 0xC3, // key_set()
    KPTU = 0xC4, // key_passthru()
    MSST = 0xC5, // mouse_set()
    MPTU = 0xC6, // mouse_passthru()
    KSGT = 0xC7, // key_get()
    MSGT = 0xC8, // mouse_get()
    MRUN = 0xD0, // macro_run()
    MRTM = 0xD1, // macoro_time()
    MSTP = 0xD2, // macro_stop()
    MREC = 0xD3, // macro_rec()
    PMSN = 0xDE, // pmem_save (1 param)
    PMLN = 0xDF, // pmem_load (1 param)
    PMLD = 0xE0, // pmem_load
    PMSV = 0xE1, // pmem_save (1 param)
    PMR = 0xE2, // pmem_read
    PMRB = 0xE3, 
    PMRW = 0xE4,
    PMRD = 0xE5, // pmem_read (non literal)
    PMWB = 0xE6, // pmem_write (byte)
    PMWW = 0xE7, // pmem_write (word)
    PMWD = 0xE8, // pmem_write (i32)
    SCPL = 0xEA, // script_load()
    MSLG = 0xEB, // mslot_get()
    MSLL = 0xEC, // mslot_load()
    MSLC = 0xED, // mslot_check()
    SYSTM = 0xEE, // system_time()
    ELPTM = 0xEF, // elapsed_time()
    PSTS = 0xF0, // port_status()
    PCONN = 0xF1, // port_connect()
    PCONX = 0xF2, // port_connect (2 param)
    PDIS = 0xF3, // port_disconnect()
    PIFFB = 0xF4, // port_inhibit_ffb()
    PPFFB = 0xF5, // port_permit_ffb()
    PTOFF = 0xF6, // port_turnoff()
    PUON = 0xF7, // port_usb_poweron()
    PUOFF = 0xF8, //port_usb_poweroff()
    PWSRC = 0xF9, // power_source()
    DOVR = 0xFD, // display_overlay()
    PRTF = 0xFE, //printf()
}